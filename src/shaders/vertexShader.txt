#version 400 core

in vec3 position;
in vec2 textureCoords;
in vec3 normal;


out vec2 pass_textureCoords;
out vec3 surfaceNormal;
//number of light that can effect the object at once
out vec3 toLightVector[4];
out vec3 toCameraVector;

//FOG visibility
//visibility = e^-pow((distance*density),gradient)
//gradient shows how fast visibility decreases with distance
out float visibility;

uniform mat4 transformationMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform vec3 lightPosition[4];

uniform float useFakeLighting;


//texture atlas
uniform float numberOfRows;
uniform vec2 offset;

uniform float density;
uniform float gradient;

void main(void){

	vec4 worldPosition = transformationMatrix * vec4(position, 1.0);
	vec4 positionRelativeToCamera = viewMatrix * worldPosition;
	//Projection - View - Transformation
	gl_Position =  projectionMatrix * positionRelativeToCamera;
	pass_textureCoords = (textureCoords / numberOfRows) + offset;
	
	vec3 actualNormal = normal;
	if(useFakeLighting > 0.5){
	//pointing directly up
		actualNormal = vec3(0.0,1.0,0.0); 
	}
	surfaceNormal = (transformationMatrix *  vec4(actualNormal,0.0)).xyz;
	for(int i=0; i< 4; i++){
		toLightVector[i] = lightPosition[i] - worldPosition.xyz;
	}
	toCameraVector = (inverse(viewMatrix) * vec4(0.0,0.0,0.0,1.0)).xyz - worldPosition.xyz;
	
	//distance of vertex from the camera
	float distance = length(positionRelativeToCamera.xyz);
	visibility = exp(-pow((distance*density),gradient));
	//maintain the value between 0 and 1
	visibility = clamp(visibility, 0.0, 1.0);
}